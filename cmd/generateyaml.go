package cmd

import (
	"fmt"
	"os"
	"text/template"
	"encoding/json"
)

type TemplateData struct {
	PrometheusParams PrometheusParams
	HeadersString    string
}

func generateValuesFile(prometheusParams PrometheusParams) {
	yamlTemplateString := `
image:
  repository: public.ecr.aws/i5o6o6d7/k8s-metrics-agent
  pullPolicy: IfNotPresent
  tag: 0.3.10

# -----------------------------------------------------------------------------
# The following parameters should be configured according to your environment.
# Please make sure to replace any value that contains the 'INSERT' text, and
# also read the comments of other parameters and determine if they apply to
# your case.

environment:
  # The name of the K8S cluster, which should match its name in your cloud environment
  CLUSTER_NAME: '<INSERT CLUSTER NAME HERE>'

  # Root account ID: In AWS that's ID of the payer account. For Azure it's the name of the account in Anodot-Costs>'
  ACCOUNT_ID: '<INSERT ROOT ACCOUNT ID HERE>'

  # Cluster owner account ID: In AWS that's the linked account ID owning the cluster. In Azure that's the subscription ID.
  LINKED_ACCOUNT_ID: '<INSERT CLUSTER OWNER ACCOUNT ID HERE>'

  # Cloud provider. Valid options: 'aws' for AWS, 'azure' for Azure.
  CLOUD_PROVIDER: '<INSERT CLOUD PROVIDER HERE>'
  
  # Base URL to Prometheus or PromQL-compatible server (e.g. Thanos/Grafana), that has the query API endpoint.
  # This is the default path for Prometheus installation. Override this to match your environment.
  PROMETHEUS_URL: {{ .PrometheusParams.Url }}

  # The following settings are relevant only in some cases. Set them when it applies to your case according to the
  # description. Do not set them when they are not required.

  # In case authentication is required to connect to the Prometheus query server, uncomment and set these user and password.
  {{if ne .PrometheusParams.Username ""}}USERNAME: {{ .PrometheusParams.Username }}
  PASSWORD: {{ .PrometheusParams.Password }}
  {{else}}#  USERNAME: ''
  #  PASSWORD: ''{{end}}

  # In case special HTTP request headers are required by the Prometheus server, insert them in a JSON format as string.
  # A known case is a multi-tenant mode in some Grafana configurations that require the X-Scope-OrgID header (see the
  # example).
  {{if ne .HeadersString "null"}}REQUEST_HEADERS: '{{ .HeadersString }}'
  {{else}}#  REQUEST_HEADERS: '{{"{"}}"X-Scope-OrgID": "YOUR-TENANT-NAME"{{"}"}}'{{end}}

  # The following can be used to override the default timeout for the request sent to the Prometheus server. Values are
  # in units of seconds. VALIDATION_REQUEST_TIMEOUT is used only in the initial stage of configuration validation to
  # test access to the server.
  #  VALIDATION_REQUEST_TIMEOUT = 5
  #  REQUEST_TIMEOUT = 300

  # A general condition that matches metrics relevant to this cluster.
  # This is required only in environments where metrics are stored from multiple clusters, so this conditions filters
  # out all the rest.
  {{if ne .PrometheusParams.QueryCondition ""}}METRIC_CONDITION: '{{ .PrometheusParams.QueryCondition }}'
  {{else}}#  METRIC_CONDITION: 'cluster="<INSERT CLUSTER NAME HERE>"'{{end}}

  # Metrics collected from the agent are typically generated by jobs of the following names, which by default are set
  # during Prometheus installation. In case the name of the jobs is different in your environment, uncomment
  # and set them accordingly.
  {{if and (ne .PrometheusParams.KubeStateMetricsJobName "") (ne .PrometheusParams.KubeStateMetricsJobName "kube-state-metrics") }}KUBE_STATE_METRICS_JOB_NAME: '{{ .PrometheusParams.KubeStateMetricsJobName }}'
  {{else}}#  KUBE_STATE_METRICS_JOB_NAME: 'kube-state-metrics'{{end}}
  {{if and (ne .PrometheusParams.KubeletJobName "") (ne .PrometheusParams.KubeletJobName "kubelet") }}KUBELET_JOB_NAME: '{{ .PrometheusParams.KubeletJobName }}'
  {{else}}#  KUBELET_JOB_NAME: 'kubelet'{{end}}

  # When workload of type Deployment is set (non-default), uncomment this (and leave the value as it is).
  # CRON_SCHEDULE: : "0 * * * *"
  
  # The following values are for internal use and should not be modified.
  S3_BUCKET: 'prod-prometheus-agent'
  MONITORING: 'none'
  LOG_TO_CLOUD_WATCH: 'true'  

environmentSecrets:
  # Access key required for uploading collected metrics to Anodot (should be provided to you by Anodot)
  AWS_ACCESS_KEY_ID: '<INSERT ANODOT ACCESS KEY>'
  AWS_SECRET_ACCESS_KEY: '<INSERT ANODOT SECRET ACCESS KEY>'
`
	headersJson, err := json.Marshal(prometheusParams.Headers)
	if err != nil {
		fmt.Println("Error coverting headers to json:", err)
		return
	}

	data := TemplateData{
		PrometheusParams: prometheusParams,
		HeadersString: string(headersJson),
	}

	yamlTemplate, err := template.New("yamlTemplate").Parse(yamlTemplateString)
	if err != nil {
		fmt.Println("Error parsing template:", err)
		return
	}

	file, err := os.Create("values.yaml")
	if err != nil {
		fmt.Println("Error creating file:", err)
		return
	}
	defer file.Close()

	err = yamlTemplate.Execute(file, data)
	if err != nil {
		fmt.Println("Error executing template:", err)
		return
	}

	fmt.Println("Generated values file: values.yaml")
}
